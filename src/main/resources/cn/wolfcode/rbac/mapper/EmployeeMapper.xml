<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.wolfcode.rbac.mapper.EmployeeMapper" >
  <resultMap id="BaseResultMap" type="cn.wolfcode.rbac.domain.Employee" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="age" property="age" jdbcType="INTEGER" />
    <result column="admin" property="admin" jdbcType="BIT" />

    <association property="dept" javaType="Department" columnPrefix="d_">
      <id column="id" property="id"/>
      <result column="name" property="name"/>
    </association>

    <collection property="roles" ofType="Role" column="id"
                select="cn.wolfcode.rbac.mapper.RoleMapper.selectRolesByEmpId"/>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from employee
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteEmpAndRoleRelation">
    delete from employee_role
    where employee_id = #{empId}
  </delete>
  <insert id="insert" parameterType="cn.wolfcode.rbac.domain.Employee" useGeneratedKeys="true" keyProperty="id" >
    insert into employee (name, password, email, 
      age, admin, dept_id)
    values (#{name,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{age,jdbcType=INTEGER}, #{admin,jdbcType=BIT}, #{dept.id,jdbcType=BIGINT})
  </insert>
  <insert id="saveEmpAndRoleRelation">
    insert into employee_role(employee_id, role_id) values(#{empId}, #{roleId})
  </insert>
  <update id="updateByPrimaryKey" parameterType="cn.wolfcode.rbac.domain.Employee" >
    update employee
    set name = #{name,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      age = #{age,jdbcType=INTEGER},
      admin = #{admin,jdbcType=BIT},
      dept_id = #{dept.id,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select e.*, d.id d_id, d.name d_name
    from employee e
    left join department d
    on e.dept_id = d.id
    where e.id = #{id,jdbcType=BIGINT}
  </select>
  <select id="selectAll" resultMap="BaseResultMap" >
    select id, name, password, email, age, admin, dept_id
    from employee
  </select>

    <select id="selectForCount" resultType="java.lang.Integer">
      select count(*) from employee e left join department d on e.dept_id = d.id
      <where>
        <if test="keyword != null">
          and (e.name like CONCAT('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
        </if>
        <if test="deptId != -1">
          and dept_id = #{deptId}
        </if>
      </where>
    </select>
  <select id="selectForData" resultMap="BaseResultMap">
    select e.*, d.id d_id, d.name d_name
    from employee e left join department d on e.dept_id = d.id
    <where>
    <if test="keyword != null">
      and (e.name like concat('%',#{keyword},'%') or e.email like concat('%',#{keyword},'%'))
    </if>
    <if test="deptId != -1">
      and dept_id = #{deptId}
    </if>
  </where>
    limit #{start}, #{pageSize}
  </select>
</mapper>